{"version":3,"sources":["phonebook/Numbers.js","phonebook/Filter.js","phonebook/PhonebookForm.js","phonebook/Notification.js","services/numbers.js","App.js","index.js"],"names":["Numbers","filter","persons","handleDelete","filteredPersons","person","name","toLowerCase","includes","map","key","id","className","number","onClick","Filter","handle","onSubmit","event","preventDefault","type","value","onChange","PhonebookForm","info","addContact","newName","handleNameChange","newNumber","handleNumberChange","Notifcation","notification","message","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setNotification","useEffect","numbersService","initData","phonebookFormProps","find","window","confirm","findPersonID","updatedPerson","setTimeout","catch","error","newContact","concat","target","Notification","personToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95a62652.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Numbers = ({ filter, persons, handleDelete }) => {\r\n    const filteredPersons = persons.filter(person => \r\n        person.name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n    \r\n    return (\r\n        <div>\r\n            {filteredPersons.map(person => \r\n                <div key={person.id}>\r\n                    <span className=\"contact\">\r\n                        {person.name} {person.number} <button onClick={() => handleDelete(person)} className=\"contactBtn\">Delete</button>\r\n                    </span>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Numbers","import React from 'react'\r\n\r\nconst Filter = ({ filter, handle }) => {\r\n    return (\r\n        <form onSubmit={(event) => event.preventDefault()}>\r\n            filter shown with <input type=\"text\" value={filter} onChange={handle} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PhonebookForm = ({info}) => {\r\n    return (\r\n        <form onSubmit={info.addContact}>\r\n            <div>\r\n                name: <input value={info.newName} onChange={info.handleNameChange} />\r\n            </div>\r\n            <div>\r\n                number: <input value={info.newNumber} onChange={info.handleNumberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PhonebookForm","import React from 'react'\r\n// :{ message, type }\r\nconst Notifcation = ({notification}) => {\r\n    if(notification === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={`${notification.type} notification`}>\r\n            {notification.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifcation","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/numbers'\r\n// const baseUrl = 'http://localhost:3001/api/numbers'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject).then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`).then(response => response.data)\r\n}\r\n\r\n// export default { \r\n//   getAll: getAll, \r\n//   create: create, \r\n//   update: update \r\n// }\r\n\r\nexport default { getAll, create, update, deleteContact }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Course from './components/Course'\r\nimport Numbers from './phonebook/Numbers'\r\nimport Filter from './phonebook/Filter'\r\nimport PhonebookForm from './phonebook/PhonebookForm'\r\nimport Notification from './phonebook/Notification'\r\nimport CountryFilter from './country/CountryFilter'\r\nimport CountryInfo from './country/CountryInfo'\r\nimport CountryWeather from './country/CountryWeather'\r\nimport SearchResults from './country/SearchResults'\r\nimport noteService from './services/notes'\r\nimport numbersService from './services/numbers'\r\nimport axios from 'axios'\r\n\r\n\r\n// API country data \r\n\r\n// function lowerCase(string) {\r\n//     return string.toLowerCase()\r\n// }\r\n\r\n// const App = () => {\r\n//     const [ countries, setCountries ] = useState([])\r\n//     const [ filter, setNewFilter ] = useState('')\r\n//     const [ country, setCountry ] = useState({})\r\n//     const [ weather, setWeather ] = useState({})\r\n//     const [ filteredCountries, setFilteredCountries ] = useState({})\r\n\r\n//     const countryHook = () => {\r\n//         axios\r\n//         .get('https://restcountries.eu/rest/v2/all')\r\n//         .then(response => {\r\n//             console.log(response.data)\r\n//             setCountries(response.data)\r\n//         })\r\n//     }\r\n\r\n//     const weatherHook = () => {\r\n//         if(country.name === undefined)\r\n//             setWeather({})\r\n//         else {\r\n//             axios\r\n//             .get(`https://api.openweathermap.org/data/2.5/weather?q=${country.capital},${country.alpha2Code}&units=imperial&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\r\n//             .then(response => {\r\n//                 setWeather(response.data)\r\n//             })\r\n//             .catch(() => {\r\n//                 alert('Search query matched with a country, but is not found in the weather API')\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     useEffect(countryHook, [])\r\n//     useEffect(weatherHook, [country])\r\n\r\n//     const handleFilterChange = (event) => {\r\n//         const newFilter = event.target.value\r\n//         const filtered = countries.filter(country => lowerCase(country.name).includes(lowerCase(newFilter)))\r\n        \r\n//         setNewFilter(newFilter)\r\n//         setFilteredCountries(filtered)\r\n\r\n//         // display the remaining country's info\r\n//         if(filtered.length === 1) {\r\n//             handleCountrySelection(filtered[0])\r\n//         }\r\n//         else {\r\n//             setCountry({})\r\n//         }\r\n//     }\r\n\r\n//     const handleCountrySelection = (country) => {\r\n//         setCountry(country)\r\n//     }\r\n\r\n//     return (\r\n//       <div>\r\n//         <CountryFilter filter={filter} handleChange={handleFilterChange} />\r\n//         <SearchResults filter={filter} countries={filteredCountries} handleCountrySelection={handleCountrySelection} />\r\n//         <CountryInfo country={country} />\r\n//         <CountryWeather weather={weather} />\r\n//       </div>\r\n//     )\r\n// }\r\n\r\n\r\n// Notes using json server\r\n\r\n// const App = () => {\r\n//     const [ notes, setNotes ] = useState([])\r\n//     const [ newNote, setNewNote ] = useState('')\r\n//     const [ showAll, setShowAll ] = useState(true)\r\n\r\n//     const hook = () => {\r\n//         console.log('effect')\r\n//         noteService\r\n//             .getAll()\r\n//             .then(initData => {\r\n//                 console.log('promise fulfilled')\r\n//                 setNotes(initData)\r\n//             })\r\n//     }\r\n//     console.log('render', notes.length, 'notes')\r\n\r\n//     useEffect(hook, [])\r\n\r\n//     const addNote = (event) => {\r\n//         event.preventDefault()\r\n//         const noteObject = {\r\n//             content: newNote,\r\n//             date: new Date().toISOString(),\r\n//             important: Math.random() < 0.5,\r\n//             id: notes.length + 1,\r\n//         }\r\n\r\n//         noteService\r\n//             .create(noteObject)\r\n//             .then(newNote => {\r\n//                 setNotes(notes.concat(newNote))\r\n//                 setNewNote('')            \r\n//             })\r\n//     }\r\n\r\n//     const handleNoteChange = (event) => {\r\n//         console.log(event.target.value)\r\n//         setNewNote(event.target.value)\r\n//     }\r\n\r\n//     const toggleImportanceOf = (id) => {\r\n//         const note = notes.find(note => note.id === id)\r\n//         const changedNote = {...note, important: !note.important}\r\n\r\n//         noteService\r\n//             .update(id, changedNote).then(newNote => {\r\n//                 setNotes(notes.map(note => note.id !== id ? note : newNote))\r\n//             })\r\n//             .catch(error => {\r\n//                 alert(\r\n//                 `the note '${note.content}' was already deleted from server`\r\n//                 )\r\n//                 setNotes(notes.filter(n => n.id !== id))\r\n//             })\r\n//     }\r\n\r\n//     const notesToShow = showAll\r\n//         ? notes\r\n//         : notes.filter(note => note.important === true)\r\n\r\n//     return (\r\n//       <div>\r\n//         <h1>Notes</h1>\r\n//         <div>\r\n//             <button onClick={() => setShowAll(!showAll)}>\r\n//                 show {showAll ? 'important' : 'all'}\r\n//             </button>\r\n//         </div>\r\n//         <ul>\r\n//             {notesToShow.map(note => \r\n//                 <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\r\n//             )}\r\n//         </ul>\r\n//         <form onSubmit={addNote}>\r\n//             <input \r\n//                 value={newNote}\r\n//                 onChange={handleNoteChange} \r\n//             />\r\n//             <button type=\"submit\">save</button>\r\n//         </form>\r\n//       </div>\r\n//     )\r\n// }\r\n\r\n// COurses\r\n\r\n// const App = () => {\r\n//     const courses = [\r\n//         {\r\n//           name: 'Half Stack application development',\r\n//           id: 1,\r\n//           parts: [\r\n//             {\r\n//               name: 'Fundamentals of React',\r\n//               exercises: 10,\r\n//               id: 1\r\n//             },\r\n//             {\r\n//               name: 'Using props to pass data',\r\n//               exercises: 7,\r\n//               id: 2\r\n//             },\r\n//             {\r\n//               name: 'State of a component',\r\n//               exercises: 14,\r\n//               id: 3\r\n//             },\r\n//             {\r\n//               name: 'Redux',\r\n//               exercises: 11,\r\n//               id: 4\r\n//             }\r\n//           ]\r\n//         }, \r\n//         {\r\n//           name: 'Node.js',\r\n//           id: 2,\r\n//           parts: [\r\n//             {\r\n//               name: 'Routing',\r\n//               exercises: 3,\r\n//               id: 1\r\n//             },\r\n//             {\r\n//               name: 'Middlewares',\r\n//               exercises: 7,\r\n//               id: 2\r\n//             }\r\n//           ]\r\n//         }\r\n//     ]\r\n\r\n\r\n// Exercises 2.6-2.10 Phonebook\r\n\r\nfunction findPersonID(name, persons) {\r\n    const foundPerson = persons.find(person => person.name === name)\r\n    return foundPerson.id\r\n}\r\n\r\nconst App = () => {\r\n    const [ persons, setPersons ] = useState([]) \r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber ] = useState('')\r\n    const [ filter, setNewFilter ] = useState('')\r\n    const [ notification, setNotification ] = useState(null)\r\n\r\n    const initPhoneBook = () => {\r\n        numbersService\r\n            .getAll()\r\n            .then(initData => {\r\n                setPersons(initData)\r\n            })\r\n    }\r\n\r\n    useEffect(initPhoneBook, [])\r\n\r\n    const addContact = (event) => {\r\n        event.preventDefault()\r\n        \r\n        // person is not in the list\r\n        if(!persons.find(person => person.name === newName)) {\r\n            numbersService\r\n                .create({name: newName, number: newNumber})\r\n                .then(newContact => {\r\n                    setPersons(persons.concat(newContact))\r\n                    \r\n                    setNotification({message: `Added ${newName}`, type: 'success'})\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 5000)\r\n                })\r\n                .catch(error => {\r\n                    setNotification({message: error.response.data.error, type: 'error'})\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 5000)\r\n                })\r\n\r\n            setNewName('')\r\n            setNewNumber('')\r\n        }\r\n\r\n        else {\r\n            const result = window.confirm(`${newName} is already in the phonebook, replace the old number with the new one?`)\r\n\r\n            if(result) {\r\n                const id = findPersonID(newName, persons)\r\n                numbersService\r\n                    .update(id, {name: newName, number: newNumber})\r\n                    .then(updatedPerson => {\r\n                        setPersons(persons.map(person => id !== person.id ? person : updatedPerson))\r\n                        \r\n                        setNotification({message: `Updated ${newName}`, type: 'success'})\r\n                        setTimeout(() => {\r\n                            setNotification(null)\r\n                        }, 5000)\r\n                    })\r\n                    .catch(error => {\r\n                        setNotification({message: `Information of ${newName} has already been removed from server`, type: 'error'})\r\n                        setTimeout(() => {\r\n                            setNotification(null)\r\n                        }, 5000)\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterChange = (event) => {\r\n        event.preventDefault()\r\n        const filter = event.target.value\r\n        setNewFilter(filter)\r\n    }\r\n\r\n    const handleDelete = (personToDelete) => {\r\n        const result = window.confirm(`Delete ${personToDelete.name}?`)\r\n\r\n        if(result) {\r\n            numbersService\r\n                .deleteContact(personToDelete.id)\r\n                .then(() => {\r\n                    setPersons(persons.filter(person => person.id !== personToDelete.id))\r\n                    // setNotification(`Information of ${personToDelete.name} has already `)\r\n                })\r\n        }\r\n    }\r\n\r\n    const phonebookFormProps = {\r\n        addContact: addContact,\r\n        newName: newName,\r\n        newNumber: newNumber,\r\n        handleNameChange: handleNameChange,\r\n        handleNumberChange: handleNumberChange\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <Notification notification={notification} />\r\n        <Filter filter={filter} handle={handleFilterChange} />\r\n        \r\n        <h2>Add a new number</h2>\r\n        <PhonebookForm info={phonebookFormProps} />\r\n        \r\n        <h2>Numbers</h2>\r\n        <Numbers filter={filter} persons={persons} handleDelete={handleDelete} />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\n\nconst notes = [\n    {\n      id: 1,\n      content: 'HTML is easy',\n      date: '2019-05-30T17:30:31.098Z',\n      important: true\n    },\n    {\n      id: 2,\n      content: 'Browser can execute only Javascript',\n      date: '2019-05-30T18:39:34.091Z',\n      important: false\n    },\n    {\n      id: 3,\n      content: 'GET and POST are the most important methods of HTTP protocol',\n      date: '2019-05-30T19:20:14.298Z',\n      important: true\n    }\n]\n  \nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}