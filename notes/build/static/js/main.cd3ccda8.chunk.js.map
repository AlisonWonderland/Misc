{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","console","log","length","useEffect","noteService","initData","notesToShow","filter","map","key","find","changedNote","catch","error","alert","n","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oPAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,gBAAkB,oBACjD,OACI,4BACKH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCcjC,EAlBA,WACb,OAAOI,IAAMC,IAHC,cAGYC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiBvC,EAdA,SAAAC,GACb,OAAOL,IAAMM,KAPC,aAOaD,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAanD,EAVA,SAACG,EAAIF,GAClB,OAAOL,IAAMQ,IAAN,UAXO,aAWP,YAAwBD,GAAMF,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC0U7DK,EA7PH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACNC,EADM,KACCC,EADD,OAEkBF,mBAAS,IAF3B,mBAENG,EAFM,KAEGC,EAFH,OAGkBJ,oBAAS,GAH3B,mBAGNK,EAHM,KAGGC,EAHH,KAcdC,QAAQC,IAAI,SAAUP,EAAMQ,OAAQ,SAEpCC,qBAXa,WACTH,QAAQC,IAAI,UACZG,IAEKnB,MAAK,SAAAoB,GACFL,QAAQC,IAAI,qBACZN,EAASU,QAKL,IAEhB,IAsCMC,EAAcR,EACdJ,EACAA,EAAMa,QAAO,SAAA9B,GAAI,OAAuB,IAAnBA,EAAKG,aAEhC,OACE,6BACE,qCACA,6BACI,4BAAQE,QAAS,kBAAMiB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKQ,EAAYE,KAAI,SAAA/B,GAAI,OACjB,kBAAC,EAAD,CAAMgC,IAAKhC,EAAKa,GAAIb,KAAMA,EAAMC,iBAAkB,kBA9BnC,SAACY,GACxB,IAAMb,EAAOiB,EAAMgB,MAAK,SAAAjC,GAAI,OAAIA,EAAKa,KAAOA,KACtCqB,EAAW,2BAAOlC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CwB,EACYd,EAAIqB,GAAa1B,MAAK,SAAAW,GAC1BD,EAASD,EAAMc,KAAI,SAAA/B,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOmB,SAEtDgB,OAAM,SAAAC,GACHC,MAAM,aAAD,OACQrC,EAAKI,QADb,sCAGLc,EAASD,EAAMa,QAAO,SAAAQ,GAAC,OAAIA,EAAEzB,KAAOA,SAkBoB0B,CAAmBvC,EAAKa,WAGxF,0BAAM2B,SAvDM,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfvC,QAASe,EACTyB,MAAM,IAAIC,MAAOC,cACjB3C,UAAW4C,KAAKC,SAAW,GAC3BnC,GAAII,EAAMQ,OAAS,GAGvBE,EACYgB,GACPnC,MAAK,SAAAW,GACFD,EAASD,EAAMgC,OAAO9B,IACtBC,EAAW,SA2Cf,2BACI8B,MAAO/B,EACPgC,SAzCa,SAACV,GACtBlB,QAAQC,IAAIiB,EAAMW,OAAOF,OACzB9B,EAAWqB,EAAMW,OAAOF,UAyCpB,4BAAQG,KAAK,UAAb,W,MC7IZC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.cd3ccda8.chunk.js","sourcesContent":["import React from 'react'; // imported because Note is a react component.\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'Set important' : 'Set not important'\r\n    return (\r\n        <li>\r\n            {note.content} \r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject).then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\n// export default { \r\n//   getAll: getAll, \r\n//   create: create, \r\n//   update: update \r\n// }\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Course from './components/Course'\r\nimport Numbers from './phonebook/Numbers'\r\nimport Filter from './phonebook/Filter'\r\nimport PhonebookForm from './phonebook/PhonebookForm'\r\nimport Notification from './phonebook/Notification'\r\nimport CountryFilter from './country/CountryFilter'\r\nimport CountryInfo from './country/CountryInfo'\r\nimport CountryWeather from './country/CountryWeather'\r\nimport SearchResults from './country/SearchResults'\r\nimport noteService from './services/notes'\r\nimport numbersService from './services/numbers'\r\nimport axios from 'axios'\r\n\r\n\r\n// API country data \r\n\r\n// function lowerCase(string) {\r\n//     return string.toLowerCase()\r\n// }\r\n\r\n// const App = () => {\r\n//     const [ countries, setCountries ] = useState([])\r\n//     const [ filter, setNewFilter ] = useState('')\r\n//     const [ country, setCountry ] = useState({})\r\n//     const [ weather, setWeather ] = useState({})\r\n//     const [ filteredCountries, setFilteredCountries ] = useState({})\r\n\r\n//     const countryHook = () => {\r\n//         axios\r\n//         .get('https://restcountries.eu/rest/v2/all')\r\n//         .then(response => {\r\n//             console.log(response.data)\r\n//             setCountries(response.data)\r\n//         })\r\n//     }\r\n\r\n//     const weatherHook = () => {\r\n//         if(country.name === undefined)\r\n//             setWeather({})\r\n//         else {\r\n//             axios\r\n//             .get(`https://api.openweathermap.org/data/2.5/weather?q=${country.capital},${country.alpha2Code}&units=imperial&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\r\n//             .then(response => {\r\n//                 setWeather(response.data)\r\n//             })\r\n//             .catch(() => {\r\n//                 alert('Search query matched with a country, but is not found in the weather API')\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     useEffect(countryHook, [])\r\n//     useEffect(weatherHook, [country])\r\n\r\n//     const handleFilterChange = (event) => {\r\n//         const newFilter = event.target.value\r\n//         const filtered = countries.filter(country => lowerCase(country.name).includes(lowerCase(newFilter)))\r\n        \r\n//         setNewFilter(newFilter)\r\n//         setFilteredCountries(filtered)\r\n\r\n//         // display the remaining country's info\r\n//         if(filtered.length === 1) {\r\n//             handleCountrySelection(filtered[0])\r\n//         }\r\n//         else {\r\n//             setCountry({})\r\n//         }\r\n//     }\r\n\r\n//     const handleCountrySelection = (country) => {\r\n//         setCountry(country)\r\n//     }\r\n\r\n//     return (\r\n//       <div>\r\n//         <CountryFilter filter={filter} handleChange={handleFilterChange} />\r\n//         <SearchResults filter={filter} countries={filteredCountries} handleCountrySelection={handleCountrySelection} />\r\n//         <CountryInfo country={country} />\r\n//         <CountryWeather weather={weather} />\r\n//       </div>\r\n//     )\r\n// }\r\n\r\n\r\n// Notes using json server\r\n\r\nconst App = () => {\r\n    const [ notes, setNotes ] = useState([])\r\n    const [ newNote, setNewNote ] = useState('')\r\n    const [ showAll, setShowAll ] = useState(true)\r\n\r\n    const hook = () => {\r\n        console.log('effect')\r\n        noteService\r\n            .getAll()\r\n            .then(initData => {\r\n                console.log('promise fulfilled')\r\n                setNotes(initData)\r\n            })\r\n    }\r\n    console.log('render', notes.length, 'notes')\r\n\r\n    useEffect(hook, [])\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n            id: notes.length + 1,\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(newNote => {\r\n                setNotes(notes.concat(newNote))\r\n                setNewNote('')            \r\n            })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const toggleImportanceOf = (id) => {\r\n        const note = notes.find(note => note.id === id)\r\n        const changedNote = {...note, important: !note.important}\r\n\r\n        noteService\r\n            .update(id, changedNote).then(newNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : newNote))\r\n            })\r\n            .catch(error => {\r\n                alert(\r\n                `the note '${note.content}' was already deleted from server`\r\n                )\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important === true)\r\n\r\n    return (\r\n      <div>\r\n        <h1>Notes</h1>\r\n        <div>\r\n            <button onClick={() => setShowAll(!showAll)}>\r\n                show {showAll ? 'important' : 'all'}\r\n            </button>\r\n        </div>\r\n        <ul>\r\n            {notesToShow.map(note => \r\n                <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\r\n            )}\r\n        </ul>\r\n        <form onSubmit={addNote}>\r\n            <input \r\n                value={newNote}\r\n                onChange={handleNoteChange} \r\n            />\r\n            <button type=\"submit\">save</button>\r\n        </form>\r\n      </div>\r\n    )\r\n}\r\n\r\n// COurses\r\n\r\n// const App = () => {\r\n//     const courses = [\r\n//         {\r\n//           name: 'Half Stack application development',\r\n//           id: 1,\r\n//           parts: [\r\n//             {\r\n//               name: 'Fundamentals of React',\r\n//               exercises: 10,\r\n//               id: 1\r\n//             },\r\n//             {\r\n//               name: 'Using props to pass data',\r\n//               exercises: 7,\r\n//               id: 2\r\n//             },\r\n//             {\r\n//               name: 'State of a component',\r\n//               exercises: 14,\r\n//               id: 3\r\n//             },\r\n//             {\r\n//               name: 'Redux',\r\n//               exercises: 11,\r\n//               id: 4\r\n//             }\r\n//           ]\r\n//         }, \r\n//         {\r\n//           name: 'Node.js',\r\n//           id: 2,\r\n//           parts: [\r\n//             {\r\n//               name: 'Routing',\r\n//               exercises: 3,\r\n//               id: 1\r\n//             },\r\n//             {\r\n//               name: 'Middlewares',\r\n//               exercises: 7,\r\n//               id: 2\r\n//             }\r\n//           ]\r\n//         }\r\n//     ]\r\n\r\n\r\n// Exercises 2.6-2.10 Phonebook\r\n\r\n// function findPersonID(name, persons) {\r\n//     const foundPerson = persons.find(person => person.name === name)\r\n//     return foundPerson.id\r\n// }\r\n\r\n// const App = () => {\r\n//     const [ persons, setPersons ] = useState([]) \r\n//     const [ newName, setNewName ] = useState('')\r\n//     const [ newNumber, setNewNumber ] = useState('')\r\n//     const [ filter, setNewFilter ] = useState('')\r\n//     const [ notification, setNotification ] = useState(null)\r\n\r\n//     const initPhoneBook = () => {\r\n//         numbersService\r\n//             .getAll()\r\n//             .then(initData => {\r\n//                 console.log(initData)\r\n//                 setPersons(initData)\r\n//             })\r\n//     }\r\n\r\n//     useEffect(initPhoneBook, [])\r\n\r\n//     const addContact = (event) => {\r\n//         event.preventDefault()\r\n        \r\n//         // person is not in the list\r\n//         if(!persons.find(person => person.name === newName)) {\r\n//             numbersService\r\n//                 .create({name: newName, number: newNumber})\r\n//                 .then(newContact => {\r\n//                     setPersons(persons.concat(newContact))\r\n                    \r\n//                     setNotification({message: `Added ${newName}`, type: 'success'})\r\n//                     setTimeout(() => {\r\n//                         setNotification(null)\r\n//                     }, 5000)\r\n//                 })\r\n\r\n//             setNewName('')\r\n//             setNewNumber('')\r\n//         }\r\n\r\n//         else {\r\n//             const result = window.confirm(`${newName} is already in the phonebook, replace the old number with the new one?`)\r\n\r\n//             if(result) {\r\n//                 const id = findPersonID(newName, persons)\r\n//                 numbersService\r\n//                     .update(id, {name: newName, number: newNumber})\r\n//                     .then(updatedPerson => {\r\n//                         setPersons(persons.map(person => id !== person.id ? person : updatedPerson))\r\n                        \r\n//                         setNotification({message: `Updated ${newName}`, type: 'success'})\r\n//                         setTimeout(() => {\r\n//                             setNotification(null)\r\n//                         }, 5000)\r\n//                     })\r\n//                     .catch(error => {\r\n//                         setNotification({message: `Information of ${newName} has already been removed from server`, type: 'error'})\r\n//                         setTimeout(() => {\r\n//                             setNotification(null)\r\n//                         }, 5000)\r\n//                     })\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     const handleNameChange = (event) => {\r\n//         setNewName(event.target.value)\r\n//     }\r\n\r\n//     const handleNumberChange = (event) => {\r\n//         setNewNumber(event.target.value)\r\n//     }\r\n\r\n//     const handleFilterChange = (event) => {\r\n//         event.preventDefault()\r\n//         const filter = event.target.value\r\n//         setNewFilter(filter)\r\n//     }\r\n\r\n//     const handleDelete = (personToDelete) => {\r\n//         const result = window.confirm(`Delete ${personToDelete.name}?`)\r\n\r\n//         if(result) {\r\n//             numbersService\r\n//                 .deleteContact(personToDelete.id)\r\n//                 .then(() => {\r\n//                     setPersons(persons.filter(person => person.id !== personToDelete.id))\r\n//                     // setNotification(`Information of ${personToDelete.name} has already `)\r\n//                 })\r\n//         }\r\n//     }\r\n\r\n//     const phonebookFormProps = {\r\n//         addContact: addContact,\r\n//         newName: newName,\r\n//         newNumber: newNumber,\r\n//         handleNameChange: handleNameChange,\r\n//         handleNumberChange: handleNumberChange\r\n//     }\r\n  \r\n//     return (\r\n//       <div>\r\n//         <h1>Phonebook</h1>\r\n//         <Notification notification={notification} />\r\n//         <Filter filter={filter} handle={handleFilterChange} />\r\n        \r\n//         <h2>Add a new number</h2>\r\n//         <PhonebookForm info={phonebookFormProps} />\r\n        \r\n//         <h2>Numbers</h2>\r\n//         <Numbers filter={filter} persons={persons} handleDelete={handleDelete} />\r\n//       </div>\r\n//     )\r\n// }\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\n\nconst notes = [\n    {\n      id: 1,\n      content: 'HTML is easy',\n      date: '2019-05-30T17:30:31.098Z',\n      important: true\n    },\n    {\n      id: 2,\n      content: 'Browser can execute only Javascript',\n      date: '2019-05-30T18:39:34.091Z',\n      important: false\n    },\n    {\n      id: 3,\n      content: 'GET and POST are the most important methods of HTTP protocol',\n      date: '2019-05-30T19:20:14.298Z',\n      important: true\n    }\n]\n  \nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}